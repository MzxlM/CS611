import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
/**
*@ClassName:CustomerStockWindow
*@Description:CustomerStockWindow File contains CustomerStockWindow class and form.
 * It prompts a window for users to view the details of their secuirtyaccount including
 * the stock pool.
*@Author:Yuesi Liu, Zhaoyu Yin, Xinlong Zhang
*@Date:12/14/2021
*@Version: Final
*
*/

public class CustomerStockWindow extends JFrame implements Window {
    private JPanel cusStockPanel;
    private JLabel unrealizedLabel;
    private JLabel realizedLabel;
    private JPanel stockpoolPanel;
    private JPanel cuspoolPanel;
    private JButton openButton;
    private JButton transferButton;
    private JLabel accountID;
    private JLabel balanceLabel;
    private ATM atmsystem;

    public CustomerStockWindow(CustomerWindow customerWindow, ATM atm) {
        this.atmsystem = atm;
        WindowSetter.windowConfig2(this, cusStockPanel);
        transferButton.setVisible(false);
        reFresh();
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                customerWindow.setVisible(true);
            }
        });

        openButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                new OpenSecurityDialog(atmsystem);
                reFresh();
            }
        });
        transferButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                new SecurityTransferDialog(atmsystem);
                reFresh();
            }
        });
    }

    @Override
    public void reFresh() {
        if (atmsystem.haveSecurityAccount(atmsystem.getUser().getUID())) {

            int UID = atmsystem.getUser().getUID();
            openButton.setVisible(false);
            transferButton.setVisible(true);
            balanceLabel.setText("$" + Helper.getRoundTwoDigits(atmsystem.getSecurityAccount(UID).getBalance()));
            accountID.setText(String.valueOf(atmsystem.getSecurityAccount(UID).getAccountID()));
            unrealizedLabel.setText(Helper.getRoundTwoDigits(atmsystem.getAllPurchasedStocks(UID).getUnrealizedProfit()));
            realizedLabel.setText(Helper.getRoundTwoDigits(atmsystem.getAllPurchasedStocks(UID).getRealizedProfit()));

            refreshStockPool();
            refreshOwnedStock();
        }
    }

    public void refreshStockPool() {
        stockpoolPanel.setLayout(new BoxLayout(stockpoolPanel, BoxLayout.Y_AXIS));
        stockpoolPanel.removeAll();
        List<Stock> ss = atmsystem.getAllStocksForUser();
        for (Stock s : ss) {
            StockElement e = new StockElement(atmsystem, s, "StockPool", this);
            stockpoolPanel.add(e.$$$getRootComponent$$$());
        }
        stockpoolPanel.revalidate();
        stockpoolPanel.repaint();
    }

    public void refreshOwnedStock() {
        cuspoolPanel.setLayout(new BoxLayout(cuspoolPanel, BoxLayout.Y_AXIS));
        cuspoolPanel.removeAll();
        int UID = atmsystem.getUser().getUID();
        List<StockUserDTO> ss = atmsystem.getAllPurchasedStocks(UID).getStock();
        for (StockUserDTO s : ss) {
            StockElement e = new StockElement(atmsystem, s, "Customer", this);
            cuspoolPanel.add(e.$$$getRootComponent$$$());
        }
        cuspoolPanel.revalidate();
        cuspoolPanel.repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        cusStockPanel = new JPanel();
        cusStockPanel.setLayout(new GridLayoutManager(4, 4, new Insets(20, 20, 20, 20), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 5, new Insets(0, 0, 0, 0), -1, -1));
        cusStockPanel.add(panel1, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, "Security Account", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label1 = new JLabel();
        label1.setText("Balance: ");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        balanceLabel = new JLabel();
        balanceLabel.setText("        ");
        panel1.add(balanceLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openButton = new JButton();
        openButton.setText("Open");
        panel1.add(openButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        transferButton = new JButton();
        transferButton.setText("Transfer In/Out");
        panel1.add(transferButton, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Account ID: ");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        accountID = new JLabel();
        accountID.setText("     ");
        panel1.add(accountID, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Currency: USD");
        panel1.add(label3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        cusStockPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, new Dimension(-1, 350), 0, false));
        stockpoolPanel = new JPanel();
        stockpoolPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        stockpoolPanel.setMaximumSize(new Dimension(2147483647, 310));
        scrollPane1.setViewportView(stockpoolPanel);
        stockpoolPanel.setBorder(BorderFactory.createTitledBorder(null, "Stock Pooling", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JScrollPane scrollPane2 = new JScrollPane();
        cusStockPanel.add(scrollPane2, new GridConstraints(2, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, new Dimension(-1, 300), 0, false));
        cuspoolPanel = new JPanel();
        cuspoolPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        cuspoolPanel.setMinimumSize(new Dimension(36, 300));
        scrollPane2.setViewportView(cuspoolPanel);
        cuspoolPanel.setBorder(BorderFactory.createTitledBorder(null, "Customer Owned", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label4 = new JLabel();
        label4.setText("Unrealized $: ");
        cusStockPanel.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Realized $: ");
        cusStockPanel.add(label5, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        unrealizedLabel = new JLabel();
        unrealizedLabel.setText("        ");
        cusStockPanel.add(unrealizedLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        realizedLabel = new JLabel();
        realizedLabel.setText("        ");
        cusStockPanel.add(realizedLabel, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return cusStockPanel;
    }

}
